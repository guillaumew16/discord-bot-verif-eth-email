const Discord = require('discord.js');
const config = require('./config.json');
const nodemailer = require("nodemailer");
const showdown = require('showdown');
const randtoken = require('rand-token');
const Keyv = require('keyv');

const client = new Discord.Client();
const converter = new showdown.Converter();
const keyv = new Keyv(); // for in-memory storage
keyv.on('error', err => console.error('Keyv connection error:', err));
const HOURS_TO_MILLISECONDS = 3600 * 1000;

const theGuild = client.guilds.get(config.theGuildId);
const botName = client.user.username;
const botMail = config.transportOptions.auth;

const sampleNethz = "jsmith";
const sampleToken = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9";

const availableCommandsStr = `Available commands:
	!ping: make me say Pong
	!nethz: tell me your nethz; e.g \`!nethz ${sampleNethz}\`
	!token: tell me the token I sent you; e.g \`!token ${sampleToken}\`
	!help: print this message
	!welcomeagain: print the welcome message again, with all the instructions for the verification process
`;

const welcomeMsg = `You are currently not verified as an ETH student, so you only have access to a restricted number of channels.
To verify yourself as an ETH student, 
	1. please tell me your nethz (i.e ETH username) in the following format: \`!nethz \` + your nethz; e.g \`nethz ${sampleNethz}\`
	2. I will send an email at <nethz>@student.ethz.ch containing a token; e.g \`${sampleToken}\`
	3. then, show me that you did receive the token, by telling me: \`!token \` + the token; e.g \`token ${sampleToken}\`
Remarks:
	- To reset the process, e.g if you misspelled your nethz, just do step 1 again. (I will invalidate the previous token, don't worry.)
	- My email address, which I will use in step 2, is ${botMail.user}; please check in your spam folder if you don't receive anything. (Note that no human will check the inbox of ${botMail.user}.)
	- Once you receive the email, you have ${config.tokenTTL} hours to accomplish step 3, as the token expires after that duration.
	- I will not store your nethz in database at any point (I only use your Discord User-ID).
I am a very stupid bot. If you have any questions or encounter any problem, please send a message to an admin of this server directly.
`;

const genMailContent = (discordUsername, token) => `Hello, \n
You have recently joined the Discord server ${theGuild.name}, under the username ${discordUsername}, and provided your nethz (i.e ETH username) for verification.
To finish the verification process, please check your Direct Message channel with me (${botName}) and send me the following token within ${config.tokenTTL} hours: 
${token}
If you did not join the Discord server ${theGuild.name} and tell me your nethz, then someone else provided your nethz. Then you don't need to do anything; the token will expire in ${config.tokenTTL} hours.
Note that I am a Discord bot and that this email was autogenerated, so please don't reply to it. (You can reply if you really want to but no human will ever see it.)
If you really need to, you can always contact ${config.emergencyContact.fullName}, your fellow ETH student who runs the Discord server ${theGuild.name}.
\nBest regards,\n
${botName}
`;

// create reusable transporter object using the default SMTP transport
const mailDefaults = {
	from: {
		name: botName,
		address: botMail.user
	},
	cc: botMail.user,
	subject: `Verify your identity on Discord server ${theGuild.name}`
};
const transporter = nodemailer.createTransport(config.transportOptions, mailDefaults);

// verify connection configuration
transporter.verify(function (error, success) {
	if (error) {
		console.log(error);
	} else {
		console.assert(success);
		console.log("Server is ready to take our messages");
	}
});

client.once('ready', () => {
	// create role config.roleName if does not exist
	if (!theGuild.roles.some(role => role.name === config.roleName)) {
		theGuild.createRole({
			name: config.roleName
		})
			.then(role => console.log(`Created new role with name ${role.name} and color ${role.color}`))
			.catch(console.error);
	}
	console.log('Ready!');
});

const prefix = config.prefix;

client.on('message', async message => {
	if (message.channel.type !== 'dm') return;
	if (message.author.bot) return;
	if (!message.content.startsWith(prefix)) {
		return message.channel.send(availableCommandsStr);
	}

	const args = message.content.slice(prefix.length).split(/ +/);
	const command = args.shift().toLowerCase();
	const user = message.author; // user (: User) and member (: GuildMember) refer to the same person, but member holds information about the relation to the guild
	const member = theGuild.members.get(user.id);

	if (command === 'ping') {
		message.channel.send('Pong');
	} else if (command === 'nethz') {
		if (!args.length) {
			return message.channel.send(`You didn't provide any nethz! Usage: e.g \`!nethz ${sampleNethz}\``);
		} else if (args.length > 1) {
			return message.channel.send(`You provided too many arguments... Usage: e.g \`!nethz ${sampleNethz}\``);
		} else if (member.roles.some(role => role.name === config.roleName)) {
			return message.channel.send(`You are already verified as an ETH student on the Discord server ${theGuild.name}!`);
		} else {
			const nethz = args[0].toLowerCase();
			const newToken = randtoken.uid(16);
			// save newToken, along with user.username and user.id, and set expiration time
			await keyv.set(user.id, newToken, config.tokenTTL * HOURS_TO_MILLISECONDS);
			const textContent = genMailContent(user.username, newToken);
			// send mail with defined transport object
			const info = await transporter.sendMail({
				to: `${nethz}@student.ethz.ch`,
				text: textContent,
				html: converter.makeHtml(textContent.replace('\n', '\n\n'))
			});
			console.log("Message sent: %s", info.messageId);
		}
	} else if (command === 'token') {
		if (!args.length) {
			return message.channel.send(`You didn't write any token! Usage: e.g \`!token ${sampleToken}\``);
		} else if (args.length > 1) {
			return message.channel.send(`You provided too many arguments... Usage: e.g \`!token ${sampleToken}\``);
		} else if (member.roles.some(role => role.name === config.roleName)) {
			return message.channel.send(`You are already verified as an ETH student on the Discord server ${theGuild.name}!`);
		} else {
			const token = args[0];
			const trueToken = await keyv.get(user.id); // recover the true token associated with user.username and user.id
			if (token === trueToken) {
				const role = theGuild.roles.find(role => role.name === config.roleName);
				user.addRole(role);
				await keyv.delete(user.id); // forget the token
				// TODO: maybe optionally send a greetings message in the #welcome channel
			} else {
				return message.channel.send(`This is not the right token.`);
			}
		}
	} else if (command === 'help') {
		message.channel.send(availableCommandsStr);
	} else {
		message.reply(`command not understood: ${availableCommandsStr}. ${availableCommandsStr}`);
	}
});

client.on('guildMemberAdd', member => {
	const msgToSend = `Hello! I see you just joined the server ${member.guild.name}. \n${welcomeMsg}`;

	member.user.dmChannel.send(msgToSend)
		.then(message => console.log(`Sent message: ${message.content}`))
		.catch(console.error);
});

client.login(config.token);
