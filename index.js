const Discord = require('discord.js');
const config = require('./config.json');
const nodemailer = require("nodemailer");
const showdown  = require('showdown');

const client = new Discord.Client();
const converter = new showdown.Converter();

const botName = client.user.username;
const botMail = config.transportOptions.auth;

const sampleNethz = "jsmith";
const sampleToken = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9";

const availableCommandsStr = `Available commands:
	!ping: make me say Pong
	!nethz: tell me your nethz; e.g \`!nethz ${sampleNethz}\`
	!token: tell me the token I sent you; e.g \`!token ${sampleToken}\`
	!help: print this message
	!welcomeagain: print the welcome message again, with all the instructions for the verification process
`;

const welcomeMsg = `You are currently not verified as an ETH student, so you only have access to a restricted number of channels.
To verify yourself as an ETH student, 
	1. please tell me your nethz (i.e ETH username) in the following format: \`!nethz \` + your nethz; e.g \`nethz ${sampleNethz}\`
	2. I will send an email at <nethz>@student.ethz.ch containing a token; e.g \`${sampleToken}\`
	3. then, show me that you did receive the token, by telling me: \`!token \` + the token; e.g \`token ${sampleToken}\`
Remarks:
	- To reset the process, e.g if you misspelled your nethz, just do step 1 again. (I will invalidate the previous token, don't worry.)
	- My email address, which I will use in step 2, is ${botMail.user}; please check in your spam folder if you don't receive anything. (Note that no human will check the inbox of ${botMail.user}.)
	- Once you receive the email, you have 24 hours to accomplish step 3, as the token expires after that duration.
	- I will not store your nethz in database at any point (I only use your discord username and ID).
I am a very stupid bot. If you have any questions or encounter any problem, please send a message to an admin of this server directly.
`;

const genMailContent = (discordUsername, token, guildName) => `Hello, \n
You have recently joined the Discord server ${guildName}, under the username ${discordUsername}, and provided your nethz (i.e ETH username) for verification.
To finish the verification process, please check your Direct Message channel with me (${botName}) and send me the following token within 24 hours: 
${token}
If you did not join the Discord server ${guildName} and tell me your nethz, then someone else provided your nethz. Then you don't need to do anything; the token will expire in 24 hours.
Note that I am a discord bot and that this email was autogenerated, so please don't reply to it. (You can reply if you really want to but no human will ever see it.)
If you really need to, you can always contact ${config.emergencyContact.fullName}, your fellow ETH student who runs the Discord server ${guildName}.
\nBest regards,\n
${botName}
`;

// create reusable transporter object using the default SMTP transport
const mailDefaults = {
	from: {
		name: botName,
		address: botMail.user
	},
	cc: botMail.user
};
const transporter = nodemailer.createTransport(config.transportOptions, mailDefaults);

// verify connection configuration
transporter.verify(function (error, success) {
	if (error) {
		console.log(error);
	} else {
		console.log("Server is ready to take our messages");
	}
});

async function sendMail(nethz, discordUsername, token, guildName) {
	const textContent = genMailContent(discordUsername, token, guildName);

	// send mail with defined transport object
	const info = await transporter.sendMail({
		to: `${nethz}@student.ethz.ch`,
		subject: `Verify your identity on Discord server ${guildName}`,
		text: textContent,
		html: converter.makeHtml(textContent.replace('\n', '\n\n'))
	});

	console.log("Message sent: %s", info.messageId);
	// Message sent: <b658f8ca-6296-ccf4-8306-87d57a0b4321@example.com>
}

client.once('ready', () => {
	console.log('Ready!');
});

const prefix = config.prefix;

client.on('message', message => {
	if (message.channel.type !== 'dm') return;
	if (message.author.bot) return;
	if (!message.content.startsWith(prefix)) {
		return message.channel.send(availableCommandsStr);
	}

	const args = message.content.slice(prefix.length).split(/ +/);
	const command = args.shift().toLowerCase();
	const user = message.author;

	if (command === 'ping') {
		message.channel.send('Pong');
	} else if (command === 'nethz') {
		if (!args.length) {
			return message.channel.send(`You didn't provide any nethz!`);
		} else if (args.length > 1) {
			return message.channel.send(`You provided too many arguments... Usage: e.g \`!nethz ${sampleNethz}\``);
		} else {
			const nethz = args[0];
			// TODO
			throw Error("not yet implemented");
		}
	} else if (command === 'token') {
		if (!args.length) {
			return message.channel.send(`You didn't provide any nethz!`);
		} else if (args.length > 1) {
			return message.channel.send(`You provided too many arguments... Usage: e.g \`!token ${sampleToken}\``);
		} else {
			const token = args[0];
			// TODO
			throw Error("not yet implemented");
		}
	} else if (command === 'help') {
		message.channel.send(availableCommandsStr);
	} else {
		message.reply(`command not understood: ${availableCommandsStr}. ${availableCommandsStr}`);
	}
});

client.on('guildMemberAdd', member => {
	const msgToSend = `Hello! I see you just joined the server ${member.guild.name}. \n${welcomeMsg}`;

	member.user.dmChannel.send(msgToSend)
		.then(message => console.log(`Sent message: ${message.content}`))
		.catch(console.error);
});

client.login(config.token);
